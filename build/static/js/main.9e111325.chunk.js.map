{"version":3,"sources":["components/Loading-Indicator/index.js","components/Image-loader/index.js","components/Image-Pagination/index.js","custom-hooks/use-intersector.js","App.js","serviceWorker.js","index.js"],"names":["LoadingIndicator","width","height","color","viewBox","xmlns","stroke","fill","fillRule","strokeWidth","cx","cy","r","attributeName","begin","dur","values","calcMode","keyTimes","keySplines","repeatCount","ImageLoader","data","url","type","useState","isLoading","setIsLoading","chooseLoader","controls","src","style","visibility","onLoad","ImagePagination","props","imageContainerRef","useRef","incomingRef","reference","setReference","entry","setEntry","observer","intersectionCallback","entries","useEffect","current","unobserve","window","IntersectionObserver","rootMargin","threshold","observe","useIntersector","currentAnimal","setCurrentAnimal","imageRepo","setImageRepo","loadAnimal","a","fetch","then","res","json","setAnimal","event","animalName","target","getAttribute","isIntersecting","data-animal","onClick","map","index","key","ref","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e111325.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const LoadingIndicator = ({\n    width = 44,\n    height = 44,\n    color = \"#c3c3c3\"\n}) => {\n  return (\n        <svg width={width} height={height} viewBox={` 0 0 ${width } ${height}`} xmlns=\"http://www.w3.org/2000/svg\" stroke={color}>\n                <g fill=\"none\" fillRule=\"evenodd\" strokeWidth=\"2\">\n                <circle cx={width/2} cy={height/2} r=\"1\">\n                <animate attributeName=\"r\"\n            begin=\"0s\" dur=\"1.8s\"\n            values=\"1; 20\"\n            calcMode=\"spline\"\n            keyTimes=\"0; 1\"\n            keySplines=\"0.165, 0.84, 0.44, 1\"\n            repeatCount=\"indefinite\" />\n                <animate attributeName=\"stroke-opacity\"\n            begin=\"0s\" dur=\"1.8s\"\n            values=\"1; 0\"\n            calcMode=\"spline\"\n            keyTimes=\"0; 1\"\n            keySplines=\"0.3, 0.61, 0.355, 1\"\n            repeatCount=\"indefinite\" />\n                </circle>\n            <circle cx={width/2} cy={height/2} r=\"1\">\n                <animate attributeName=\"r\"\n                         begin=\"-0.9s\" dur=\"1.8s\"\n                         values=\"1; 20\"\n                         calcMode=\"spline\"\n                         keyTimes=\"0; 1\"\n                         keySplines=\"0.165, 0.84, 0.44, 1\"\n                         repeatCount=\"indefinite\" />\n                <animate attributeName=\"stroke-opacity\"\n                         begin=\"-0.9s\" dur=\"1.8s\"\n                         values=\"1; 0\"\n                         calcMode=\"spline\"\n                         keyTimes=\"0; 1\"\n                         keySplines=\"0.3, 0.61, 0.355, 1\"\n                         repeatCount=\"indefinite\" />\n            </circle>\n            </g>\n        </svg>\n  );\n};\n","import React, {useState} from \"react\";\nimport {LoadingIndicator} from \"../Loading-Indicator\";\n\nexport const ImageLoader = ({data = {}, width, height}) => {\n    const {url, type} = data;\n    const [isLoading, setIsLoading] = useState(true);\n\n    const chooseLoader = () => {\n        setIsLoading(false);\n    };\n\n    const chooseRender = () => {\n       if(type === \"video\") {\n           return <video  width={200} height={200} controls>\n               <source src={url} />\n           </video>;\n       }\n       return <>\n           <img style={{visibility: isLoading ? \"hidden\": \"visible\"}} onLoad={chooseLoader} width={200} height={200} src={url}/>\n           {isLoading && <LoadingIndicator color={\"blue\"} />}\n       </>;\n    };\n\n    return chooseRender();\n\n};\n","import React, {useEffect, useRef, useState} from \"react\";\nimport {useIntersector} from \"../../custom-hooks/use-intersector\";\nimport {ImageLoader} from \"../Image-loader\";\n\nexport const ImagePagination = props => {\n    const imageContainerRef = useRef(null);\n    const [entry, setReference] = useIntersector(imageContainerRef?.current);\n    const [currentAnimal, setCurrentAnimal] = useState(null);\n    const [imageRepo, setImageRepo] = useState([]);\n\n    const getImageList = () => imageRepo.map((data, index) => <div key={`${data.url}-${index}`}><ImageLoader data={data} /> </div>);\n    const getImageFromSource = animal => fetch(`/get-animal/${animal}`).then(res => res.json());\n\n\n    const loadAnimal = async currentAnimal => {\n        const data = await getImageFromSource(currentAnimal);\n        setImageRepo([...imageRepo, ...[data]]);\n    };\n    const setAnimal = event => {\n        const animalName = event.target.getAttribute(\"data-animal\");\n        setImageRepo([]);\n        setCurrentAnimal(animalName);\n    };\n\n\n    useEffect(() => {\n        if(currentAnimal && entry && entry.isIntersecting){\n            loadAnimal(currentAnimal);\n        }\n    }, [currentAnimal, entry, loadAnimal]);\n\n\n    const renderAnimals = () => (\n        <div>\n            <button data-animal=\"dog\" onClick={setAnimal}>Load Dog</button>\n            <button data-animal=\"cat\" onClick={setAnimal}>Load Cat</button>\n            <button data-animal=\"wolf\" onClick={setAnimal}>Load Wolf</button>\n            <div>{getImageList()}</div>\n            <div ref={imageContainerRef} />\n        </div>\n    );\n\n    useEffect(() => {\n        setReference(imageContainerRef.current);\n    }, [setReference, entry]);\n\n\n    return <div style={{width: \"100%\"}}>\n        {renderAnimals()}\n    </div>\n};\n","import {useEffect, useRef, useState} from \"react\";\n\nexport const useIntersector = incomingRef => {\n    const [reference, setReference] = useState(incomingRef);\n    const [entry, setEntry] = useState(null);\n    const observer = useRef(null);\n\n\n    const intersectionCallback = entries => {\n        const [entry] = entries;\n        entry && setEntry(entry);\n    };\n\n    useEffect(() => {\n        if(observer.current) observer.current.unobserve(reference);\n\n        /* eslint-disable no-unused-expressions */\n        observer.current = new window.IntersectionObserver(intersectionCallback, {\n            rootMargin: '0px',\n            threshold: 1.0\n        });\n        reference && observer?.current?.observe(reference);\n        return () => {\n            reference && observer?.current?.unobserve(reference)\n        }\n    }, [reference]);\n\n    return [entry, setReference];\n\n};\n","import React from 'react';\nimport './App.css';\nimport {ImagePagination} from \"./components/Image-Pagination\";\n\n\nconst App = () => {\n  return <div>\n    <ImagePagination/>\n  </div>\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}