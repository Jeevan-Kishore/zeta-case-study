{"version":3,"sources":["components/Image-Pagination/index.js","custom-hooks/use-intersector.js","App.js","serviceWorker.js","index.js"],"names":["ImagePagination","props","imageContainerRef","useRef","incomingRef","useState","reference","setReference","entry","setEntry","observer","intersectionCallback","entries","useEffect","current","unobserve","window","IntersectionObserver","rootMargin","threshold","observe","useIntersector","imageRepo","promiseArray","map","url","fetch","then","res","json","getImageFromSource","Promise","all","console","log","ref","imgSrc","src","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kQAGaA,EAAkB,SAAAC,GAC3B,IAAMC,EAAoBC,iBAAO,MADG,ECDV,SAAAC,GAAgB,IAAD,EACPC,mBAASD,GADF,mBAClCE,EADkC,KACvBC,EADuB,OAEfF,mBAAS,MAFM,mBAElCG,EAFkC,KAE3BC,EAF2B,KAGnCC,EAAWP,iBAAO,MAGlBQ,EAAuB,SAAAC,GAAY,IAC9BJ,EAD6B,YACpBI,EADoB,MAEpCJ,GAASC,EAASD,IAiBtB,OAdAK,qBAAU,WAAO,IAAD,EASZ,OARGH,EAASI,SAASJ,EAASI,QAAQC,UAAUT,GAGhDI,EAASI,QAAU,IAAIE,OAAOC,qBAAqBN,EAAsB,CACrEO,WAAY,MACZC,UAAW,IAEfb,IAAS,OAAII,QAAJ,IAAIA,GAAJ,UAAIA,EAAUI,eAAd,OAAI,EAAmBM,QAAQd,IACjC,WAAO,IAAD,EACTA,IAAS,OAAII,QAAJ,IAAIA,GAAJ,UAAIA,EAAUI,eAAd,OAAI,EAAmBC,UAAUT,OAE/C,CAACA,IAEG,CAACE,EAAOD,GDtBec,CAAc,OAACnB,QAAD,IAACA,OAAD,EAACA,EAAmBY,SAF5B,mBAE7BN,EAF6B,KAEtBD,EAFsB,OAIFF,mBAAS,IAJP,mBAI7BiB,EAJ6B,UAyBpC,OAbAT,qBAAU,WACN,IAAMU,EAAe,CAAC,8BAA+B,+BAAgC,+BAChFC,KAAI,SAAAC,GAAG,OANW,SAAAA,GACzB,OAAOC,MAAMD,GAAKE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAKhBC,CAAmBL,MAEnCM,QAAQC,IAAIT,GAAcI,MAAK,SAAAC,GAAG,OAAIK,QAAQC,IAAIN,QAEnD,IAEHf,qBAAU,WACNN,EAAaL,EAAkBY,WAChC,CAACP,EAAcC,IAGX,yBAAK2B,IAAKjC,GAnBUoB,EAAUE,KAAI,SAAAY,GAAM,OAAI,yBAAKC,IAAKD,SEElDE,EANH,WACV,OAAO,6BACL,kBAAC,EAAD,QCKgBC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.a466b09d.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\nimport {useIntersector} from \"../../custom-hooks/use-intersector\";\n\nexport const ImagePagination = props => {\n    const imageContainerRef = useRef(null);\n    const [entry, setReference] = useIntersector(imageContainerRef?.current);\n\n    const [imageRepo, setImageRepo] = useState([]);\n\n    const getImageList = () => imageRepo.map(imgSrc => <img src={imgSrc}/>);\n\n    const getImageFromSource = url => {\n      return fetch(url).then(res => res.json());\n    };\n\n    useEffect(() => {\n        const promiseArray = [\"https://aws.random.cat/meow\", \"https://random.dog/woof.json\", \"https://randomfox.ca/floof/\"]\n            .map(url => getImageFromSource(url));\n\n        Promise.all(promiseArray).then(res => console.log(res));\n\n    }, []);\n\n    useEffect(() => {\n        setReference(imageContainerRef.current);\n    }, [setReference, entry]);\n\n\n    return <div ref={imageContainerRef}>\n        {getImageList()}\n    </div>\n};\n","import {useEffect, useRef, useState} from \"react\";\n\nexport const useIntersector = incomingRef => {\n    const [reference, setReference] = useState(incomingRef);\n    const [entry, setEntry] = useState(null);\n    const observer = useRef(null);\n\n\n    const intersectionCallback = entries => {\n        const [entry] = entries;\n        entry && setEntry(entry);\n    };\n\n    useEffect(() => {\n        if(observer.current) observer.current.unobserve(reference);\n\n        /* eslint-disable no-unused-expressions */\n        observer.current = new window.IntersectionObserver(intersectionCallback, {\n            rootMargin: '0px',\n            threshold: 1.0\n        });\n        reference && observer?.current?.observe(reference);\n        return () => {\n            reference && observer?.current?.unobserve(reference)\n        }\n    }, [reference]);\n\n    return [entry, setReference];\n\n};\n","import React from 'react';\nimport './App.css';\nimport {ImagePagination} from \"./components/Image-Pagination\";\n\n\nconst App = () => {\n  return <div>\n    <ImagePagination/>\n  </div>\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}